{
    "collab_server" : "",
    "contents" : "library(tm)\nlibrary(slam)\n\nabstract.stop.words <- c(\"cancer\",\"express\",\"studi\",\"activ\",\"result\",\n                         \"increas\",\"gene\",\"protein\",\"level\",\"signific\",\n                         \"compar\",\"associ\",\"develop\",\"analysi\",\"use\",\"observ\",\n                         \"demonstr\",\"found\",\"includ\",\"determin\",\"suggest\",\"conclusion\",\n                         \"background\",\"effect\",\"identifi\",\"data\",\"potenti\",\"method\",\"may\",\n                         \"evalu\",\"perform\",\"assess\",\"show\",\"shown\",\"can\",\"howev\",\"one\",\"two\",\"report\",\n                         \"also\")\n\nconcatenate_and_split_hyphens <- function(x){\n  gsub(\"\\\\s(\\\\w+)-(\\\\w+)\\\\s\",\" \\\\1\\\\2 \\\\1 \\\\2 \",x)\n}\n\nremoveAloneNumbers <- function(x){\n  gsub(\"\\\\s\\\\d+\\\\s\",\"\", x)\n}\n\nremovepvalue <- function(x){\n  gsub(\"p\\\\s?[=<>]\\\\s?[\\\\.\\\\d]+\",\" \",x,perl=TRUE)\n}\n\ngreekSubs <- \n  list(a=\"&#945;\",\n       b=\"&#946;\",\n       g=\"&#947;\" ,\n       d=\"&#948;\",\n       e=\"&#949;\",\n       z=\"&#950;\",\n       h=\"&#951;\",\n       th=\"&#952;\",\n       i=\"&#953;\",\n       k=\"&#954;\",\n       l=\"&#955;\",\n       m=\"&#956;\",\n       n=\"&#957;\",\n       ks=\"&#958;\",\n       p=\"&#960;\",\n       r=\"&#961;\",\n       s=\"&#962;\",\n       t=\"&#964;\" ,\n       y=\"&#965;\",\n       f=\"&#966;\",\n       x=\"&#967;\" ,\n       ps=\"&#968;\",\n       w=\"&#969;\")\n\nreplace.greek <- function(x){\n  for(i in 1:length(greekSubs)){\n    x <- gsub(greekSubs[[i]], names(greekSubs)[i], x)\n  }\n  return (x)\n}\n\nstrip.markup <- function(x){\n  gsub(\"</?[A-Za-z]+>|<[A-Za-z]+\\\\s?/>\",\" \", x)\n}\n\nstrip.specialchar <- function(x){\n  gsub(\"&#\\\\d+;\",\" \", iconv(x, \"latin1\", \"UTF-8\"))\n}\n\nprepareText <- function(x){\n  concatenate_and_split_hyphens(removepvalue(tolower(strip.specialchar(replace.greek(strip.markup(x))))))\n}\n\nmakeDTM <- function(textVec){\n  corpus <- Corpus(VectorSource(textVec))\n  corpus <- tm_map(corpus, stripWhitespace)\n  corpus <- tm_map(corpus, concatenate_and_split_hyphens)\n  corpus <- tm_map(corpus, removePunctuation)\n  corpus <- tm_map(corpus, removeWords, stopwords(\"english\"))\n  corpus <- tm_map(corpus, removeAloneNumbers)\n  corpus <- tm_map(corpus, stemDocument)\n  corpus <- tm_map(corpus, removeWords, abstract.stop.words)\n  \n  # Added by XG\n  corpus <- tm_map(corpus, PlainTextDocument)\n  \n  dtm <- DocumentTermMatrix(corpus,\n                            control = list(weighting = function(x) weightTfIdf(x, normalize = TRUE)))\n  word.freq <- as.numeric(as.array(slam::rollup(dtm, 1, FUN=function(x) { sum(x > 0)})) )\n  dtm.sub <- dtm[, word.freq > 2]\n  return(dtm.sub)\n}\n\n# add more common functions -XG\ncluster_mat <- function(mat, distance, method, cor_method){\n  if(!(method %in% c(\"ward.D\",\"ward.D2\",\"single\", \"complete\", \"average\", \"mcquitty\", \"median\", \"centroid\"))){\n    stop(\"clustering method has to one form the list: 'ward.D', 'ward.D2', 'single', 'complete', 'average', 'mcquitty', 'median' or 'centroid'.\")\n  }\n  \n  if(!(distance %in% c(\"correlation\", \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\")) & class(distance) != \"dist\"){\n    print(!(distance %in% c(\"correlation\", \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\", \"minkowski\")) | class(distance) != \"dist\")\n    stop(\"distance has to be a dissimilarity structure as produced by dist or one measure form the list: 'correlation', 'euclidean', 'maximum', 'manhattan', 'canberra', 'binary', 'minkowski'\")\n  }\n  if (distance == \"correlation\"){\n    d <- as.dist(1 - cor(t(mat),method=cor_method))\n  }\n  else {\n    if(class(distance) == \"dist\") {\n      d <- distance\n    }\n    else{\n      d <- dist(mat,method = distance)\n    }\n  }\n  #ward.D2 doesn't work in flashClust\n  #return(flashClust(d, method = method)) #hclust replaced by flashClust from WCGNA (much faster than hclust)\n  return (hclust(d,method=method))\n}\n\n# @param hc is the hcluster of dist(S)\nHCtoJSON<-function(hc){\n  \n  labels<-hc$labels\n  merge<-data.frame(hc$merge)\n  height<- hc$height\n  for (i in (1:nrow(merge))) {\n    if (merge[i,1]<0 & merge[i,2]<0) {\n      eval(parse(text=paste0(\"node\", i, \"<-list(name=\\\"node\", i, \"\\\", height=\\\"\",height[i],\"\\\", children=list(list(\",listNodeInfo(labels[-merge[i,1]]),\"),list(\",listNodeInfo(labels[-merge[i,2]]),\")))\")))\n    }else if (merge[i,1]>0 & merge[i,2]<0) {\n      eval(parse(text=paste0(\"node\", i, \"<-list(name=\\\"node\", i, \"\\\", height=\\\"\",height[i],\"\\\", children=list(node\", merge[i,1], \", list(\",listNodeInfo(labels[-merge[i,2]]),\")))\")))\n    }else if (merge[i,1]<0 & merge[i,2]>0) {\n      eval(parse(text=paste0(\"node\", i, \"<-list(name=\\\"node\", i, \"\\\", height=\\\"\",height[i],\"\\\", children=list(list(\",listNodeInfo(labels[-merge[i,1]]),\"), node\", merge[i,2],\"))\")))  \n    }else if (merge[i,1]>0 & merge[i,2]>0) {\n      eval(parse(text=paste0(\"node\", i, \"<-list(name=\\\"node\", i, \"\\\", height=\\\"\",height[i],\"\\\", children=list(node\",merge[i,1] , \", node\" , merge[i,2],\" ))\")))\n    }\n  }\n  \n  eval(parse(text=paste0(\"JSON<-(node\",nrow(merge), \")\")))\n  \n  return(JSON)\n}\n\nlistNodeInfo <- function(id){\n  title <- sub(\"\\\"\",\"<q>\",df[id,\"ABSTRACT.TITLE\"])\n  title <- sub(\"\\\"\",\"</q>\",title)\n  L <- paste0('name =\\\"',id,'\\\",',\n              'title=\\\"',title,'\\\",',\n              'presenterFirst=\\\"',df[id,\"PRESENTER.FIRST\"],'\\\",',\n              'presenterLast=\\\"',df[id,\"PRESENTER.LAST\"],'\\\",',\n              'presenterInstitution=\\\"',df[id,\"PRESENTER.INSTITUTION\"],'\\\",',\n              'presenterCity=\\\"',df[id,\"PRESENTER.CITY\"],'\\\",',\n              'presenterCountry=\\\"',df[id,\"PRESENTER.COUNTRY\"],'\\\",',\n              'keywords=\\\"',paste(df[id,\"KEYWORD1\"],df[id,\"KEYWORD2\"],df[id,\"KEYWORD3\"],df[id,\"KEYWORD4\"],sep=\";\"),'\\\",',\n              'sage=\\\"',df[id,\"category_interactome1_general\"],'\\\",',\n              'moa=\\\"',df[id,\"category_interactome3_moa_small\"],'\\\",',\n              'des=\\\"',df[id,\"category_interactome2_description_small\"],'\\\",',\n              'category=\\\"',df[id,\"CategoryDes\"],'\\\"')\n  return(L)\n}\n\ncategoryCluster <- function(root, tmp, filename){\n  root[[\"children\"]] <- lapply(names(tmp), function(categoryName){\n    L <- list(id=categoryName,name=categoryName,presenterLast=categoryName)\n    children <- list()\n    tbl <- tmp[[categoryName]]\n    for(i in 1:nrow(tbl)){\n      row <- tbl[i,]\n      children[[i]] <- list(id = row[[\"presentation_number\"]],\n                            name=row[[\"presentation_number\"]],\n                            title=row[[\"abstract_title\"]],\n                            presenterFirst=row[[\"presenter_firstname\"]],\n                            presenterLast=row[[\"presenter_lastname\"]],\n                            keywords=gsub(\";NA\",\"\",paste(row[[\"keyword1\"]],row[[\"keyword2\"]],row[[\"keyword3\"]],row[[\"keyword4\"]],sep=\";\")),\n                            target=row[[\"target\"]],\n                            tumor=row[[\"tumor\"]],\n                            sage=row[[\"sage_keyword\"]],\n                            pharma=row[[\"pharma_academia\"]],\n                            combo=row[[\"combination\"]],\n                            model=row[[\"model\"]])\n    }\n    L[[\"children\"]] <- children\n    return (L)\n  })\n  \n  fileConn<-file(paste0(\"./json/\",filename))\n  writeLines(toJSON(root), fileConn)\n  close(fileConn)\n}\n\ncategoryCluster2 <- function(root, tmp, filename){\n  root[[\"children\"]] <- lapply(names(tmp), function(categoryName){\n    L <- list(id=categoryName,name=categoryName,presenterLast=categoryName)\n    children <- list()\n    tbl <- tmp[[categoryName]]\n    for(i in 1:nrow(tbl)){\n      row <- tbl[i,]\n      children[[i]] <- list(id = row[[\"presentation_number\"]],\n                            name=paste(row[[\"tumor\"]],row[[\"presentation_number\"]],sep=\"_\"),\n                            title=row[[\"abstract_title\"]],\n                            presenterFirst=row[[\"presenter_firstname\"]],\n                            presenterLast=row[[\"presenter_lastname\"]],\n                            keywords=gsub(\";NA\",\"\",paste(row[[\"keyword1\"]],row[[\"keyword2\"]],row[[\"keyword3\"]],row[[\"keyword4\"]],sep=\";\")),\n                            target=row[[\"target\"]],\n                            tumor=row[[\"tumor\"]],\n                            sage=row[[\"sage_keyword\"]],\n                            pharma=row[[\"pharma_academia\"]],\n                            combo=row[[\"combination\"]],\n                            model=row[[\"model\"]])\n    }\n    L[[\"children\"]] <- children\n    return (L)\n  })\n  \n  fileConn<-file(paste0(\"./json/\",filename))\n  writeLines(toJSON(root), fileConn)\n  close(fileConn)\n}\n\ncategoryCluster_old <- function(root, tmp, filename){\n  root[[\"children\"]] <- lapply(names(tmp), function(categoryName){\n    L <- list(id=categoryName,name=categoryName)\n    tbl1 <- tmp[[categoryName]]\n    tmp2 <- split(tbl1, factor(tbl1$category_interactome2_description_small))\n    L[[\"children\"]] <- lapply(names(tmp2), function(categoryName2){\n      L2 <- list(id=paste(categoryName2,\" \",sep = \" \"),name=categoryName2)\n      children <- list()\n      tbl2 <- tmp2[[categoryName2]]\n      for(i in 1:nrow(tbl2)){\n        row <- tbl2[i,]\n        children[[i]] <- list(id = row[[\"PRESENTATIONNUMBER\"]],\n                              name=row[[\"PRESENTATIONNUMBER\"]],\n                              title=row[[\"ABSTRACT.TITLE\"]],\n                              presenterFirst=row[[\"PRESENTER.FIRST\"]],\n                              presenterLast=row[[\"PRESENTER.LAST\"]],\n                              presenterInstitution=row[[\"PRESENTER.INSTITUTION\"]],\n                              presenterCity=row[[\"PRESENTER.CITY\"]],\n                              presenterCountry=row[[\"PRESENTER.COUNTRY\"]],\n                              keywords=paste(row[[\"KEYWORD1\"]],row[[\"KEYWORD3\"]],row[[\"KEYWORD3\"]],row[[\"KEYWORD4\"]],sep=\";\"),\n                              category=row[[\"CategoryDes\"]],\n                              sage=row[[\"category_interactome1_general\"]],\n                              moa=row[['category_interactome3_moa_small']],\n                              des=row[['category_interactome2_description_small']])\n      }\n      L2[[\"children\"]] <- children\n      return (L2)\n    })\n    return(L)\n  })\n  \n  fileConn<-file(filename)\n  writeLines(toJSON(root), fileConn)\n  close(fileConn)\n}\n",
    "created" : 1523040153540.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2712771263",
    "id" : "E426AD4D",
    "lastKnownWriteTime" : 1523037886,
    "last_content_update" : 1523037886,
    "path" : "~/Dropbox/sage/AACR_interactome/2018/code/common.R",
    "project_path" : "code/common.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}