{
  "name": "@material/rtl",
  "description": "Material Components for the web RTL Scss helpers",
  "version": "0.33.0",
  "license": "Apache-2.0",
  "keywords": [
    "material components",
    "material design",
    "rtl",
    "right to left"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/material-components/material-components-web.git"
  },
  "readme": "<!--docs:\ntitle: \"RTL\"\nlayout: detail\nsection: components\nexcerpt: \"Right-to-left and bi-directional text layout via SCSS helpers.\"\npath: /catalog/rtl/\n-->\n\n# RTL\n\nUIs for languages that are read from right-to-left (RTL), such as Arabic and Hebrew, should be mirrored to ensure content is easy to understand.\n\n## Design & API Documentation\n\n<ul class=\"icon-list\">\n  <li class=\"icon-list-item icon-list-item--spec\">\n    <a href=\"https://material.io/guidelines/usability/bidirectionality.html\">Material Design guidelines: Bidirectionality</a>\n  </li>\n</ul>\n\n## Installation\n\n```\nnpm install --save @material/rtl\n```\n\n## Usage\n\n### Sass Mixins\n\n`mdc-rtl` is the most flexible mixin, because it can work with multiple CSS properties. All other RTL mixins logic could be engineered by only using `mdc-rtl`, but we provide these mixins for convenience.\n\nBoth `mdc-rtl-reflexive-property` and `mdc-rtl-reflexive-box` work with one base box-model property, e.g. margin, border, padding. But `mdc-rtl-reflexive-property` is more flexible because it accepts different left and right values. `mdc-rtl-reflexive-box` assumes the left and right values are the same, and therefore that the box-model is symmetrical.\n\n`mdc-rtl-reflexive-position` is the least flexible mixin. It only works with one horizontal position property, \"left\" or \"right\". It also assumes the left and right values are the same.\n\n| Mixin | Description |\n| ----------------------------------------------- | - |\n| `mdc-rtl($root-selector)` | Creates a rule that is applied when the root element is within an RTL context |\n| `mdc-rtl-reflexive-box($base-property, $default-direction, $value, $root-selector)` | Applies the value to the `#{$base-property}-#{$default-direction}` property  in a LTR context, and flips the direction in an RTL context. **This mixin zeros out the original value in an RTL context.**  |\n| `mdc-rtl-reflexive-property($base-property, $left-value, $right-value, $root-selector)` | Emits rules that assign `#{$base-property}`-left to `#{left-value}` and `#{base-property}`-right to `#{right-value}` in a LTR context, and vice versa in a RTL context. **Basically it flips values between a LTR and RTL context.** |\n| `mdc-rtl-reflexive-position($position-property, $value, $root-selector)` | Applies the value to the specified position in a LTR context, and flips the direction in an RTL context. `$position-property` is a horizontal position, either \"left\" or \"right\". |\n\n**A note about [dir=\"rtl\"]**: `mdc-rtl($root-selector)` checks for `[dir=\"rtl\"]` on the ancestor element. This works in most cases, it will sometimes lead to false negatives for more complex layouts, e.g.\n\n```html\n<html dir=\"rtl\">\n  <!-- ... -->\n  <div dir=\"ltr\">\n    <div class=\"mdc-foo\">Styled incorrectly as RTL!</div>\n  </div>\n</html>\n```\n\nUnfortunately, we've found that this is the best we can do for now. In the future, selectors such as [:dir](http://mdn.io/:dir) will help us mitigate this.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/material-components/material-components-web/issues"
  },
  "homepage": "https://github.com/material-components/material-components-web#readme",
  "_id": "@material/rtl@0.33.0",
  "_npmVersion": "5.6.0",
  "_nodeVersion": "9.4.0",
  "_npmUser": {
    "name": "williamernest",
    "email": "williamernest@google.com"
  },
  "dist": {
    "integrity": "sha512-uCx7IcDdxL3KkskzGHy3guK22sBl/l5TiTkIXq3MJBKnsIicYA/Ygy1q9ft72nXGsCWxgv+0uukduQE15zjh/g==",
    "shasum": "4ae034aa9de3056c73843ac6c50b4b93ee7669aa",
    "tarball": "https://registry.npmjs.org/@material/rtl/-/rtl-0.33.0.tgz",
    "fileCount": 3,
    "unpackedSize": 9286
  },
  "maintainers": [
    {
      "email": "acdvorak@gmail.com",
      "name": "acdvorak"
    },
    {
      "email": "alex.m.sheehan@gmail.com",
      "name": "amsheehan"
    },
    {
      "email": "andrey.prigogin@gmail.com",
      "name": "aprigogin"
    },
    {
      "email": "bonniez@google.com",
      "name": "bonniez"
    },
    {
      "email": "obrien.test@gmail.com",
      "name": "bwobrien"
    },
    {
      "email": "kenneth.franqueiro@gmail.com",
      "name": "kfranqueiro"
    },
    {
      "email": "lynnjepsen@google.com",
      "name": "lynnjepsen"
    },
    {
      "email": "lynnjepsen+npm@google.com",
      "name": "material-admin"
    },
    {
      "email": "mattgoo@gmail.com",
      "name": "moog16"
    },
    {
      "email": "prodee@google.com",
      "name": "patrickrodee"
    },
    {
      "email": "williamernest@google.com",
      "name": "williamernest"
    }
  ],
  "directories": {},
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rtl_0.33.0_1521477607840_0.7939813845020793"
  },
  "_shasum": "4ae034aa9de3056c73843ac6c50b4b93ee7669aa",
  "_resolved": "https://registry.npmjs.org/@material/rtl/-/rtl-0.33.0.tgz",
  "_from": "@material/rtl@>=0.33.0 <0.34.0"
}
